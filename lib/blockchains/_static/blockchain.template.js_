'use strict';
/**
 * @module lib/blockchains/
 * @summary Whiteflag API blockchain template
 * @description Module template to develop a specific blockchain implementation
 */
module.exports = {
    init: initBlockchain,
    sendMessage,
    getMessage,
    requestSignature,
    verifySignature,
    transferFunds,
    createAccount,
    updateAccount,
    deleteAccount
};

// Node.js core and external modules //
// eslint-disable-next-line no-unused-vars
const someBlockchain = require('someBlockchain');

// Common internal functions and classes //
// eslint-disable-next-line no-unused-vars
const log = require('../common/logger');
const { ignore } = require('../common/processing');
const { ProcessingError, ProtocolError } = require('../common/errors');
const { getEmptyState } = require('./common/state');

// Whiteflag modules //
const wfState = require('../protocol/state');

// Module constants //
const MODULELOG = 'blockchain'

// Module variables //
let _bcName = 'someBlockchain';
let _bcState = {};

// MAIN MODULE FUNCTIONS //
/**
 * Initialises configured blockchains
 * @todo Implement function
 * @function initBlockchain
 * @alias module:lib/blockchains/.init
 * @param {bcInitCb} callback function called after intitialising the blockchain
 */
function initBlockchain(bcConfig, callback) {
    // Preserve name of the blockchain
    _bcName = bcConfig.name;

    wfState.getBlockchainData(_bcName, function blockchainsGetStateDb(err, bcState) {
        if (err) return callback(err, _bcName);

        // Check and preserve Ethereum state
        if (!bcState) {
            log.info(MODULELOG, `Creating new ${_bcName} entry in internal state`);
            bcState = getEmptyState();
            wfState.updateBlockchainData(_bcName, bcState);
        }
        _bcState = bcState;

        // TODO: Do stuff to initialise Blockchain and ensure the api state is updated
        return callback(new ProcessingError('Blockchain not implemented', null, 'WF_API_NOT_IMPLEMENTED'));
    });
    wfState.updateBlockchainData(_bcName, _bcState);
}

/**
 * Sends an encoded message on the blockchain
 * @todo Implement function
 * @function sendMessage
 * @alias module:lib/blockchains/.sendMessage
 * @param {wfMessage} wfMessage the Whiteflag message to be sent on the blockchain
 * @param {bcSendMessageCb} callback function called after sending Whiteflag message
 */
function sendMessage(wfMessage, callback) {
    // Check metaheader and encoded message
    if (!Object.hasOwn(wfMessage, 'MetaHeader')) {
        return callback(new ProtocolError('Missing metaheader', null, 'WF_METAHEADER_ERROR'));
    }
    if (!wfMessage.MetaHeader.encodedMessage) {
        return callback(new ProtocolError('No encoded message in metaheader', null, 'WF_METAHEADER_ERROR'));
    }
    if (wfMessage.MetaHeader.blockchain !== _bcName) {
        return callback(new ProcessingError(`Message metaheader contains wrong blockchain: ${wfMessage.MetaHeader.blockchain} instead of ${_bcName}`));
    }
    // TODO: Do stuff to send message on Blockchain
    let wfMessage = ignore(wfMessage);

    // Callback with any error and updated message metaheader w/ transaction hash etc.
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), transactionHash, blockNumber);
}

/**
 * Performs a simple query to find a message by transaction hash
 * @todo Implement function
 * @function getMessage
 * @alias module:lib/blockchains/.getMessage
 * @param {Object} wfQuery the property of the transaction to look up
 * @param {bcGetMessageCb} callback function called after Whiteflag message lookup
 */
function getMessage(wfQuery, callback) {
    // Check query parameters
    if (wfQuery['MetaHeader.blockchain'] !== _bcName) {
        return callback(new ProcessingError(`${_bcName}: Wrong blockchain specified in query: ${wfQuery['MetaHeader.blockchain']}`));
    }
    if (!wfQuery['MetaHeader.transactionHash']) {
        return callback(new ProcessingError(`${_bcName}: Transaction hash not specified in query`));
    }
    // TODO: Do stuff to find message on blockchain
    let wfMessage = ignore(wfMessage);

    // Callback with any error and looked up message
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), wfMessage);
}

/**
 * Requests a Whiteflag signature for a specific blockchain address
 * @todo Implement function
 * @function requestSignature
 * @alias module:lib/blockchains/.requestSignature
 * @param {wfSignPayload} wfSignPayload the JWS payload for the Whiteflag signature
 * @param {bcRequestSignatureCb} callback function called on completion
 */
function requestSignature(wfSignPayload, callback) {
    // TODO: Do stuff to sign the payload with blockchain keys
    let wfSignature = ignore(wfSignPayload);
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), wfSignature);
}

/**
 * Verifies a Whiteflag signature for a specific blockchain public key
 * @todo Implement function
 * @function verifySignature
 * @param {wfSignature} wfSignature the Whiteflag signature to be verified
 * @param {string} bcPublicKey the Ethereum public key to verify against
 * @param {bcVerifySignatureCb} callback function called on completion
 */
function verifySignature(wfSignature, bcPublicKey, callback) {
    // TODO: Do stuff to verify the wignature with blockchain keys
    let wfSignDecoded = ignore(wfSignature, bcPublicKey);
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), wfSignDecoded);
}

/**
 * Returns a blockchain address in binary encoded form
 * @todo Implement function
 * @function getBinaryAddress
 * @alias module:lib/blockchains/.getBinaryAddress
 * @param {string} bcAddress the blockchain address
 * @param {bcBinaryAddressCb} callback function called on completion
 */
function getBinaryAddress(bcAddress, callback) {}

/**
 * Transfers funds from one blockchain address to an other address
 * @todo Implement function
 * @function transferFunds
 * @alias module:lib/blockchains/.transferFunds
 * @param {wfTransfer} transfer the transaction details for the funds transfer
 * @param {bcSendTransactionCb} callback function called on completion
 */
function transferFunds(transfer, callback) {
    ignore(transfer);
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), transactionHash, blockNumber);
}

/**
 * Creates a new blockchain account
 * @todo Implement function
 * @function createAccount
 * @alias module:lib/blockchains/.createAccount
 * @param {string} secret hexadecimal encoded blockchain dependent secret (e.g. private key, wif or seed)
 * @param {bcAccountCb} callback function called on completion
 */
function createAccount(secret, callback) {
    // TODO: Do stuff to create account
    let account = ignore(secret);
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), account);
}

 /**
 * Updates blockchain account attributes
 * @todo Implement function
 * @function updateAccount
 * @alias module:lib/blockchains/.updateAccount
 * @param {wfAccount} account the account information including address to be updated
 * @param {bcAccountCb} callback function called on completion
 */
function updateAccount(account, callback) {
    // TODO: Do stuff to update account
    let account = ignore(account);
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), account);
}

/**
 * Deletes blockchain account
 * @todo Implement function
 * @function deleteAccount
 * @alias module:lib/blockchains/.deleteAccount
 * @param {string} address the address of the account to be deleted
 * @param {bcAccountCb} callback function called on completion
 */
function deleteAccount(address, callback) {
    // TODO: Do stuff to delete account
    let account = ignore(address);
    return callback(new ProcessingError('Function not implemented for this blockchain', null, 'WF_API_NOT_IMPLEMENTED'), account);
}
