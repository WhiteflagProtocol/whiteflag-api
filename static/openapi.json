{
    "openapi": "3.0.1",
    "info": {
        "title": "Whiteflag API",
        "version": "1.1.1",
        "description": "This Whiteflag Application Programming Interface (API) is a [Node.js](https://nodejs.org/en/about/) software implementation of the API layer that provides an interface with the Whiteflag messaging network on one or more underlying blockchains. It acts as a message transceiver between one or more blockchains and one or more end-user applications.\n\nThis API is a so called Minumum Viable Product (MVP), which means that it only supports the core features of the Whiteflag protocol for development and testing purposes. As such, it serves as the reference implementation of the Whiteflag protocol, but it is not designed and tested for secure usage and performance in a production environment.\n\nThis definition documents the API in [OpenAPI format](https://swagger.io/specification/).\n\nTwo methods are available for interaction with the API: 1. a [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) for originators to provide Whiteflag message to be sent on the blockchain, and 2. a [socket.io](https://socket.io/) [web socket](https://en.wikipedia.org/wiki/WebSocket) variant available on `/socket` for clients to listen for incoming Whiteflag messages from a blockchain. A running API has a webpage with embedded socket listener available on [/listen](/listen) and the documented source code at [/docs](/docs).\n\nAll response bodies are structured as `{meta, data, errors}`, based on the [JSON API Specification](https://jsonapi.org/format/), which has been used as a guideline (and as a guideline only).",
        "x-logo": {
            "url": "wflogo.png",
            "altText": "Whiteflag"
        }
    },
    "tags": [
        {
            "name": "Messages",
            "description": "Endpoints for operations on Whiteflag messages, such as retrieval, sending, encoding, decoding and validation."
        },
        {
            "name": "Blockchains",
            "description": "Endpoints for operations related to a specific blockchain and blockchain accounts, such as blockchain information settings, account information and authentication signatures."
        },
        {
            "name": "Accounts",
            "description": "Endpoints for operations related to a specific blockchain accounts, such as creating, updating and deleting accounts."
        },
        {
            "name": "Authentication",
            "description": "Endpoints for operations on Whiteflag authentication, such as signature and token creation and validation."
        },
        {
            "name": "Encryption",
            "description": "Endpoints for operations on Whiteflag encryption, such as managing cryptographic keys."
        },
        {
            "name": "Originators",
            "description": "Endpoints for operations on Whiteflag originators, such as authentication and management of shared secrets."
        },
        {
            "name": "State",
            "description": "Endpoints for operations on the Whiteflag state of a running API instance."
        }
    ],
    "servers": [
        {
            "url": "http://{hostname}:{port}/",
            "variables": {
                "hostname": {
                    "default": "localhost",
                    "description": "Configurable hostname"
                },
                "port": {
                    "default": "5746",
                    "description": "Configurable port number"
                }
            }
        }
    ],
    "security": [ 
        { "HTTP Authentication": [] }
    ],
    "paths": {
        "/protocol/whiteflag.standard.html": {
            "get": {
                "tags": [ "Protocol", "Static" ],
                "operationId": "getWFStandard",
                "description": "Returns the human readible Whiteflag protocol specification in HTML format."
            }
        },
        "/protocol/message.schema.json": {
            "get": {
                "tags": [ "Protocol", "Static" ],
                "operationId": "getWFMessageSchema",
                "description": "Returns the Whiteflag message JSON schema."
            }
        },
        "/protocol/metaheader.schema.json": {
            "get": {
                "tags": [ "Protocol", "Static" ],
                "operationId": "getWFMetaheaderSchema",
                "description": "Returns the Whiteflag message metaheader JSON schema."
            }
        },
        "/protocol/signature.schema.json": {
            "get": {
                "tags": [ "Protocol", "Static" ],
                "operationId": "getWFSignatureSchema",
                "description": "Returns Whiteflag authentication signature JSON schema."
            }
        },
        "/protocol/state.schema.json": {
            "get": {
                "tags": [ "Protocol", "Static" ],
                "operationId": "getWFStateSchema",
                "description": "Returns the Whiteflag API state JSON schema."
            }
        },
        "/icons/{icon}": {
            "get": {
                "tags": [ "Icons", "Static" ],
                "operationId": "getIcon",
                "description": "Returns the requested icon corresponding with a message type."
            }
        },
        "/messages": {
            "get": {
                "tags": [ "Messages" ],
                "description": "Returns an array with all incoming and outgoing messages from the primary datastore. The operation accepts MetaHeader and MessageHeader fields as optional query parameters. This operation may be disabled in the configuration.",
                "operationId": "getMessages",
                "parameters": [
                    { "$ref": "#/components/parameters/blockchainQuery" },
                    { "$ref": "#/components/parameters/transactionHashQuery" },
                    { "$ref": "#/components/parameters/originatorAddressQuery" },
                    { "$ref": "#/components/parameters/originatorPubKeyQuery" },
                    { "$ref": "#/components/parameters/recipientAddressQuery" },
                    { "$ref": "#/components/parameters/transceiveDirectionQuery" },
                    { "$ref": "#/components/parameters/blockNumberQuery" },
                    { "$ref": "#/components/parameters/confirmedQuery" },
                    { "$ref": "#/components/parameters/originatorValidQuery" },
                    { "$ref": "#/components/parameters/referenceValidQuery" },
                    { "$ref": "#/components/parameters/formatValidQuery" },
                    { "$ref": "#/components/parameters/versionQuery" },
                    { "$ref": "#/components/parameters/encryptionIndicatorQuery" },
                    { "$ref": "#/components/parameters/messageCodeQuery" },
                    { "$ref": "#/components/parameters/duressIndicatorQuery" },
                    { "$ref": "#/components/parameters/referenceIndicatorQuery" },
                    { "$ref": "#/components/parameters/referencedMessageQuery" }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessages"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/messages/send": {
            "post": {
                "tags": [ "Messages" ],
                "description": "Transmits a Whiteflag message on a blockchain and returns the result. This operation may be disabled in the configuration.",
                "operationId": "sendMessage",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfMessage"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessage"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/messages/receive": {
            "post": {
                "tags": [ "Messages" ],
                "description": "Accepts a Whiteflag message as if received from a blockchain. This may be done for simulation of incoming messages or if a direct connection with a blockchain node is not possible. Typically only used for testing. This operation may be disabled in the configuration.",
                "operationId": "receiveMessage",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfMessageEncoded"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessage"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    }
                }
            }
        },
        "/messages/encode": {
            "post": {
                "tags": [ "Messages" ],
                "description": "Encodes a Whiteflag message and returns the result. Typically used for validation and testing, because this is automatically done for outgoing messages. This operation may be disabled in the configuration.",
                "operationId": "encodeMessage",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfMessage"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessage"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    }
                }
            }
        },
        "/messages/decode": {
            "post": {
                "tags": [ "Messages" ],
                "description": "Decodes a Whiteflag message and returns the result. Typically used for validation and testing, because this is automatically done for incoming messages. This operation may be disabled in the configuration.",
                "operationId": "decodeMessage",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfMessageEncoded"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessage"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    }
                }
            }
        },
        "/messages/validate": {
            "post": {
                "tags": [ "Messages" ],
                "description": "Validates the format and reference of a Whiteflag message and returns the result. Typically used for validation and testing, because this is automatically done for incoming and outgoing messages. This operation may be disabled in the configuration.",
                "operationId": "validateMessage",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfMessage"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessages"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/messages/references": {
            "get": {
                "tags": [ "Messages" ],
                "description": "Returns an array of all Whiteflag messages referencing the message with the given transaction hash. This operation may be disabled in the configuration.",
                "operationId": "getMessageReferences",
                "parameters": [
                    { "$ref": "#/components/parameters/transactionHashQuery" },
                    { "$ref": "#/components/parameters/blockchainQuery" }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessages"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/messages/sequence": {
            "get": {
                "tags": [ "Messages" ],
                "description": "Returns an array with the Whiteflag messages in a sequence starting with the message with the given transaction hash. This operation may be disabled in the configuration.",
                "operationId": "getMessageSequence",
                "parameters": [
                    { "$ref": "#/components/parameters/transactionHashQuery" },
                    { "$ref": "#/components/parameters/blockchainQuery" }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessages"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/blockchains": {
            "get": {
                "tags": [ "Blockchains", "State" ],
                "description": "Returns an array with the names of all blockchains, regardless of their current status. This operation may be disabled in the configuration.",
                "operationId": "getAllBlockchains",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/blockchainsState"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/blockchains/{blockchain}": {
            "get": {
                "tags": [ "Blockchains", "State" ],
                "description": "Returns the configuration and status of the specified blockchain. This operation may be disabled in the configuration.",
                "operationId": "getBlockchainState",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/blockchainState"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/blockchains/{blockchain}/scan": {
            "get": {
                "tags": [ "Blockchains", "Messages" ],
                "description": "Scans a range of blocks for Whiteflag messages. This operation may be disabled in the configuration.",
                "operationId": "scanBlocks",
                "parameters": [
                    { "in": "query", "name": "from", "type": "integer", "required": true },
                    { "in": "query", "name": "to", "type": "integer", "required": true }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfMessages"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/blockchains/{blockchain}/accounts": {
            "get": {
                "tags": [ "Blockchains", "Accounts", "State" ],
                "description": "Returns an array with all account addresses of the specified blockchain. This operation may be disabled in the configuration.",
                "operationId": "getAccounts",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/blockchainAccounts"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            },
            "post": {
                "tags": [ "Blockchains", "Accounts" ],
                "description": "Creates a new account for the specified blockchain. This operation may be disabled in the configuration.",
                "operationId": "createAccount",
                "requestBody": {
                    "$ref": "#/components/requestBodies/createAccount"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/blockchainAccountCreated"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "409": {
                        "$ref": "#/components/responses/error409"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/blockchains/{blockchain}/accounts/{account}": {
            "get": {
                "tags": [ "Blockchains", "Accounts", "State" ],
                "description": "Returns the details of the specified blockchain account. This operation may be disabled in the configuration.",
                "operationId": "getAccount",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/blockchainAccount"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            },
            "patch": {
                "tags": [ "Blockchains", "Accounts" ],
                "description": "Updates or adds custom properties of the specified blockchain account. Please BE CAREFUL as all attributes can be changed, which may result in an unusable account. This operation may be disabled in the configuration.",
                "operationId": "updateAccount",
                "requestBody": {
                    "$ref": "#/components/requestBodies/updateAccount"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/blockchainAccount"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            },
            "delete": {
                "tags": [ "Blockchains", "Accounts" ],
                "description": "Deletes the specified blockchain account. Please BE CAREFUL as all blockchain data will be unrecoverably deleted. This operation may be disabled in the configuration.",
                "operationId": "deleteAccount",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/blockchainAccount"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/blockchains/{blockchain}/accounts/{account}/sign": {
            "post": {
                "tags": [ "Blockchains", "Accounts", "Authentication" ],
                "description": "Signs a Whiteflag authentication payload for the blockchain address specified in the payload and returns the resulting signature to be used with authentication method 1. This signature should be made available on an internet resource to which an `A1` authentication message refers. This operation may be disabled in the configuration.",
                "operationId": "createSignature",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfSignPayload"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfSignature"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/blockchains/{blockchain}/accounts/{account}/transfer": {
            "post": {
                "tags": [ "Blockchains", "Accounts" ],
                "description": "Transfers value to another blockchain account. This operation may be disabled in the configuration.",
                "operationId": "transferFunds",
                "requestBody": {
                    "$ref": "#/components/requestBodies/transferFunds"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/transferFunds"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/signature/decode": {
            "post": {
                "tags": [ "Authentication" ],
                "description": "Decodes a Whiteflag authentication signature used for authentication method 1. Typically used for validation and testing, because this is automatically done for incoming messages. This operation may be disabled in the configuration.",
                "operationId": "decodeSignature",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfSignature"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfSignDecoded"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/signature/verify": {
            "post": {
                "tags": [ "Authentication" ],
                "description": "Verifies a Whiteflag authentication signature used for authentication method 1. Typically used for validation and testing, because this is automatically done for incoming messages. This operation may be disabled in the configuration.",
                "operationId": "verifySignature",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfExtSignature"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfSignDecoded"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/originators": {
            "get": {
                "tags": [ "Originators", "State" ],
                "description": "Returns the details of all known Whiteflag originators.",
                "operationId": "getAllOriginators",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/originatorsState"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/originators/{address}": {
            "get": {
                "tags": [ "Originators", "State" ],
                "description": "Returns the details of the specified Whiteflag originator.",
                "operationId": "getOriginator",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/originatorState"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            },
            "patch": {
                "tags": [ "Originators", "State" ],
                "description": "Updates the details of the specified Whiteflag originator. Only the provided properties will be updated. Please BE CAREFUL as this may result in loss of critical data such as cryptographic keys. This operation may be disabled in the configuration.",
                "operationId": "updateOriginator",
                "requestBody": {
                    "$ref": "#/components/requestBodies/originatorData"
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/originatorUpdated"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            },
            "delete": {
                "tags": [ "Originators", "State" ],
                "description": "Deletes the specified Whiteflag originator. Please BE CAREFUL as this may result in loss of critical data such as cryptographic keys. This operation may be disabled in the configuration.",
                "operationId": "deleteOriginator",
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/originatorDeleted"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/originators/{address}/psk/{account}": {
            "get": {
                "tags": [ "Encryption", "Originators", "State" ],
                "description": "Checks for existence of a pre-shared secret encryption key for the specified Whiteflag originator to be used with the specified blockchain account. This operation may be disabled in the configuration.",
                "operationId": "getPreSharedKey",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/pskAvailable"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            },
            "put": {
                "tags": [ "Encryption", "Originators", "State" ],
                "description": "Stores or updates a pre-shared secret encryption key for the specified Whiteflag originator to be used with the specified blockchain account. This operation may be disabled in the configuration.",
                "operationId": "storePreSharedKey",
                "requestBody": {
                    "$ref": "#/components/requestBodies/storePreSharedKey"
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/pskAccepted"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            },
            "delete": {
                "tags": [ "Encryption", "Originators", "State" ],
                "description": "Deletes a pre-shared secret encryption key for the specified Whiteflag originator to be used with the specified blockchain account. Please BE CAREFUL as the encryption key will be unrecoverably deleted. This operation may be disabled in the configuration.",
                "operationId": "deletePreSharedKey",
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/pskDeleted"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/originators/tokens": {
            "post": {
                "tags": [ "Authentication", "Originators", "State" ],
                "description": "Stores a unique pre-shared secret authentication token together with the provided Whiteflag originator data, used for authentication method 2. This operation may be disabled in the configuration.",
                "operationId": "storeAuthToken",
                "requestBody": {
                    "$ref": "#/components/requestBodies/storeAuthToken"
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/authTokenAccepted"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "409": {
                        "$ref": "#/components/responses/error409"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/originators/tokens/{authTokenId}": {
            "get": {
                "tags": [ "Authentication", "Originators", "State" ],
                "description": "Checks for the existence of a pre-shared secret authentication token and originator data with the specified token id. This data is used for authentication method 2. This operation may be disabled in the configuration.",
                "operationId": "getAuthToken",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/authTokenAvailable"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            },
            "delete": {
                "tags": [ "Authentication", "Originators", "State" ],
                "description": "Deletes the pre-shared secret authentication token and originator data with the specified token id. This data is used for authentication method 2. Please BE CAREFUL as the authentication token will be unrecoverably deleted. This operation may be disabled in the configuration.",
                "operationId": "deleteAuthToken",
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/authTokenDeleted"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        },
        "/token/create": {
            "post": {
                "tags": [ "Authentication" ],
                "description": "Creates the non-secret Whiteflag verification token for the provided pre-shared secret authentication token used for authentication method 2. The verification token is to be used in, or to validate, the `VerificationData` field of an `A2` authentication message. This operation may be disabled in the configuration.",
                "operationId": "createToken",
                "requestBody": {
                    "$ref": "#/components/requestBodies/wfAuthToken"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/wfAuthToken"
                    },
                    "400": {
                        "$ref": "#/components/responses/error400"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    },
                    "501": {
                        "$ref": "#/components/responses/error501"
                    },
                    "503": {
                        "$ref": "#/components/responses/error503"
                    }
                }
            }
        },
        "/queues/{queue}": {
            "get": {
                "tags": [ "State" ],
                "description": "Returns the requested queue in the Whiteflag state. The queues used by the API are:\n * `initVectors`: stores the initialiation vectors received with `K` messages until the corresponding encrypted message is received\n * `blockDepths`: tracks the block depth of incoming and outgoing messages until their configured confirmation depth is reached. This operation may be disabled in the configuration.",
                "operationId": "getQueue",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/queueState"
                    },
                    "401": {
                        "$ref": "#/components/responses/error401"
                    },
                    "403": {
                        "$ref": "#/components/responses/error403"
                    },
                    "404": {
                        "$ref": "#/components/responses/error404"
                    },
                    "500": {
                        "$ref": "#/components/responses/error500"
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "HTTP Authentication": {
                "description": "The API may be configured to use basic HTTP authentication, as specified in [RFC 7617](https://tools.ietf.org/html/rfc7617). It uses the standard `Authorization` field in the HTTP header as follows: `Authorization: Basic <credentials>`, where the credentials are the base64 encoded username and password joined by a single colon: `<username>:<password>`",
                "type": "http",
                "scheme": "basic"
            }
        },
        "parameters": {
            "blockchainName": {
                "description": "The name of a blockchain",
                "name": "blockchain",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "blockchainAccount": {
                "description": "The address identifying a blockchain account",
                "name": "account",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "originatorAddress": {
                "description": "The address identifying an originator",
                "name": "address",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "authenticationTokenId": {
                "description": "The identifer of an originator authentication token",
                "name": "authTokenId",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "queueName": {
                "description": "The name of a queue",
                "name": "queue",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "blockNumberQuery": {
                "description": "The number of a block",
                "name": "blockchainNumber",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "blockchainQuery": {
                "description": "The name of a blockchain",
                "name": "blockchain",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "transactionHashQuery": {
                "description": "The hash of a blockchain transaction",
                "name": "transactionHash",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "originatorAddressQuery": {
                "description": "The blockchain address of an originator",
                "name": "originatorAddress",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "originatorPubKeyQuery": {
                "description": "The public key of an originator",
                "name": "originatorPubKey",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "recipientAddressQuery": {
                "description": "The blockchain address of the recipient (only known for decrypted messages)",
                "name": "recipientAddress",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "transceiveDirectionQuery": {
                "description": "The transceive direction indicating if a message has been sent (TX) or has been received (RX)",
                "name": "transceiveDirection",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "confirmedQuery": {
                "description": "Indicates if the message has been confirmed",
                "name": "confirmed",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "originatorValidQuery": {
                "description": "Indicates if the originator of the message has been authenticated",
                "name": "originatorValid",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "referenceValidQuery": {
                "description": "Inidcates if the messages references another message correctly",
                "name": "referenceValid",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "formatValidQuery": {
                "description": "Indicates if the message format is valid",
                "name": "formatValid",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "versionQuery": {
                "description": "Indicates which version of the standard is used to generate the message",
                "name": "Version",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "encryptionIndicatorQuery": {
                "description": "Indicates if and which encryption is used",
                "name": "EncryptionIndicator",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "messageCodeQuery": {
                "description": "Indicates the type of message",
                "name": "MessageCode",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "duressIndicatorQuery": {
                "description": "Indicates whether the message was sent under force or threat",
                "name": "DuressIndicator",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "referenceIndicatorQuery": {
                "description": "Indicates how this message relates to an earlier message",
                "name": "ReferenceIndicator",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "referencedMessageQuery": {
                "description": "Blockchain dependend reference to a related earlier message",
                "name": "ReferencedMessage",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "schemas": {
            "wfMessage": {
                "title": "Whiteflag Message",
                "description": "Whiteflag message with MetaHeader as used by the API",
                "version": "1",
                "type": "object",
                "required": [ "MetaHeader", "MessageHeader", "MessageBody" ],
                "additionalProperties": false,
                "properties": {
                    "MetaHeader": {
                        "$ref": "protocol/metaheader.schema.json"
                    },
                    "MessageHeader": {
                        "$ref": "protocol/message.schema.json#/properties/MessageHeader"
                    },
                    "MessageBody": {
                        "$ref": "protocol/message.schema.json#/properties/MessageBody"
                    }
                }
            },
            "responseBodyMetaObject": {
                "title": "API response metadata",
                "description": "Meta data about the processing of the request",
                "type": "object",
                "properties": {
                    "additionalProperties": true,
                    "operationId": {
                        "description": "Unique string defined by the OpenAPI defintion used to identify the operation",
                        "type": "string"
                    },
                    "request": {
                        "description": "Details of the request on the endpoint",
                        "type": "object",
                        "properties": {
                            "client": {
                                "description": "The ip address of the client that made the request",
                                "type": "string"
                            },
                            "method": {
                                "description": "The HTTP method used to make the request",
                                "type": "string"
                            },
                            "endpoint": {
                                "description": "The endpoint on which the request has been made",
                                "type": "string"
                            }
                        }
                    },
                    "info": {
                        "description": "Information about how the data was processed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "warnings": {
                        "description": "Warnings generated when processing the request",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "errors": {
                        "description": "Errors generated when processing the request",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "responseBodyErrorObject": {
                "title": "API response errors",
                "description": "Errors describing why the request could not succesfully be fulfilled",
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "responseBodyErrors": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/responseBodyMetaObject"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/responseBodyErrorObject"
                    }
                }
            }
        },
        "requestBodies": {
            "wfMessage": {
                "description": "Whiteflag message to be send, encoded/ecrypted, or validated",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/wfMessage"
                        }
                    }
                }
            },
            "wfMessageEncoded": {
                "description": "Whiteflag message to be decoded/decrypted",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [ "MetaHeader" ],
                            "properties": {
                                "MetaHeader": {
                                    "$ref": "protocol/metaheader.schema.json"
                                }
                            }
                        }
                    }
                }
            },
            "wfSignature": {
                "description": "Whiteflag Authentication Signature",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "protocol/signature.schema.json#/definitions/wfSignature"
                        }
                    }
                }
            },
            "wfSignPayload": {
                "description": "Payload for a Whiteflag Authentication Signature",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "protocol/signature.schema.json#/definitions/wfSignPayload"
                        }
                    }
                }
            },
            "wfExtSignature": {
                "description": "An extended Whiteflag Authentication Signature",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "protocol/signature.schema.json#/definitions/wfExtSignature"
                        }
                    }
                }
            },
            "wfAuthToken": {
                "description": "Whiteflag Authentication Token",
                "content": {
                    "application/json": {
                        "schema": {
                            "title": "Whiteflag Authentication Token request body",
                            "description": "Whiteflag Authentication Token request body",
                            "type": "object",
                            "required": [ "blockchain", "address", "secret" ],
                            "properties": {
                                "blockchain": {
                                    "description": "The name of the blockchain used by the originator",
                                    "type": "string"
                                },
                                "address": {
                                    "description": "The address of the originator blockchain account with which the token is used",
                                    "type": "string"
                                },
                                "secret": {
                                    "description": "A pre-shared secret authentication token in raw hexadecimal format",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "transferFunds": {
                "description": "Data required to transfer value to another blockchain account",
                "content": {
                    "application/json": {
                        "schema": {
                            "title": "Blockchain value transfer request body",
                            "description": "Blockchain value transfer request body",
                            "type": "object",
                            "required": [ "toAddress", "value" ],
                            "properties": {
                                "fromAddress": {
                                    "description": "The address of the blockchain account to transfer value from",
                                    "type": "string"
                                },
                                "toAddress": {
                                    "description": "The address of the blockchain account to transfer value to",
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Value to be transferred in the main currency of the blockchain",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "createAccount": {
                "description": "Blockchain account data",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Blockchain account creation data object",
                            "type": "object",
                            "properties": {
                                "secret": {
                                    "description": "Optional blockchain dependent secret (e.g. private key, wif or seed) to create account with",
                                    "type": "string",
                                    "pattern": "[a-fA-F0-9]"
                                }
                            }
                        }
                    }
                }
            },
            "updateAccount": {
                "description": "Blockchain account data",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "protocol/state.schema.json#/definitions/blockchainAccountObject"
                        }
                    }
                }
            },
            "originatorData": {
                "description": "Originator data as stored in Whiteflag protocol state; all properties are optional and only provided properties will be updated",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                        }
                    }
                }
            },
            "storePreSharedKey": {
                "description": "Pre-shared encryption key data",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Pre-shared key data object",
                            "type": "object",
                            "required": [ "preSharedKey" ],
                            "properties": {
                                "preSharedKey": {
                                    "description": "A pre-shared secret encryption key in raw hexadecimal format",
                                    "type": "string",
                                    "pattern": "[a-fA-F0-9]"
                                }
                            }
                        }
                    }
                }
            },
            "storeAuthToken": {
                "description": "Pre-shared secret authentication token data",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Authentication token data object",
                            "type": "object",
                            "required": [ "name", "blockchain", "secret" ],
                            "properties": {
                                "name": {
                                    "description": "The name of the orginator",
                                    "type": "string"
                                },
                                "blockchain": {
                                    "description": "The name of the blockchain used by the originator",
                                    "type": "string"
                                },
                                "address": {
                                    "description": "The blockchain address of the originator, if already known",
                                    "type": "string"
                                },
                                "secret": {
                                    "description": "A pre-shared secret authentication token in raw hexadecimal format",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "responses": {
            "error400": {
                "description": "Invalid request, typically because of a malformed syntax or protocol error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "error401": {
                "description": "Authentication is required and was either not provided or has failed",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "error403": {
                "description": "Request is not allowed, typically because the operation is disabled in the configuration",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "error404": {
                "description": "Requested resource not found or no data available",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "error409": {
                "description": "The request conflicts with an already existing resource",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "error500": {
                "description": "Internal error preventing the running API instance to process the request",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "error501": {
                "description": "Function not implemented, such as a missing protocol feature or not implemented blockchain",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "error503": {
                "description": "Function currently not available, such as unavailable blockchain connection",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/responseBodyErrors"
                        }
                    }
                }
            },
            "wfMessage": {
                "description": "Successfully processed the Whiteflag message and returning the message with updated MetaHeader",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "#/components/schemas/wfMessage"
                                }
                            }
                        }
                    }
                }
            },
            "wfMessages": {
                "description": "Successfully processed Whiteflag message query or blockchain scan and returning an array of messages",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "description": "Array with resulting messages from a database query or blockchain scan",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/wfMessage"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "wfSignature": {
                "description": "Successfully processed the Whiteflag authentication signature and returning the result",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/signature.schema.json#/definitions/wfSignature"
                                }
                            }
                        }
                    }
                }
            },
            "wfSignDecoded": {
                "description": "Successfully processed the Whiteflag authentication signature and returning the result",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/signature.schema.json#/definitions/wfSignDecoded"
                                }
                            }
                        }
                    }
                }
            },
            "wfAuthToken": {
                "description": "Successfully created the Whiteflag authentication token verification data and returning the result",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "VerificationData": {
                                            "description": "The authentication token of an originator used as Verification Data in a Whiteflag `A2` authentication message",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "blockchainsState": {
                "description": "Successfully retrieved and returning the names of all configured blockchains",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "description": "The names of the configured blockchains",
                                    "type": "array",
                                    "items": {
                                        "description": "The name of the blockchain",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "blockchainState": {
                "description": "Successfully retrieved and returning the blockchain configuration and status",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/blockchainObject"
                                }
                            }
                        }
                    }
                }
            },
            "blockchainAccounts": {
                "description": "Successfully retrieved and returning the addresses of the blockchain accounts",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "description": "The addresses of the blockchain accounts",
                                    "type": "array",
                                    "items": {
                                        "description": "The blockchain address that identifies the account",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "blockchainAccountCreated": {
                "description": "Successfully created the blockchain account, and returning account data",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/blockchainAccountObject"
                                }
                            }
                        }
                    }
                }
            },
            "blockchainAccount": {
                "description": "Successfully retrieved, updated or deleted the blockchain account, and returning account data",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/blockchainAccountObject"
                                }
                            }
                        }
                    }
                }
            },
            "transferFunds": {
                "description": "Successfully transferred value to another blockchain account and returning the transaction hash",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "description": "Value transfer result",
                                    "type": "object",
                                    "properties": {
                                        "transactionHash": {
                                            "description": "The transaction hash of the value transfer",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "originatorsState": {
                "description": "Successfully retrieved and returning known Whiteflag originators",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/properties/originators"
                                }
                            }
                        }
                    }
                }
            },
            "originatorState": {
                "description": "Successfully retrieved and returning known Whiteflag originator",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "originatorAccepted": {
                "description": "Successfully created new Whiteflag originator",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "originatorUpdated": {
                "description": "Successfully accepted the update request for the Whiteflag originator",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "originatorDeleted": {
                "description": "Successfully accepted the delete request for the Whiteflag originator",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "pskAvailable": {
                "description": "A pre-shared encryption key for the Whiteflag originator is available",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "pskAccepted": {
                "description": "Successfully accepted new or updated pre-shared encryption key for the Whiteflag originator",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "pskDeleted": {
                "description": "Successfully accepted the delete request for the pre-shared encryption key for the Whiteflag originators",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "authTokenAvailable": {
                "description": "An authentication token for the Whiteflag originator is available",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "authTokenAccepted": {
                "description": "Successfully accepted the new authentication token for the Whiteflag originator",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "authTokenDeleted": {
                "description": "Successfully accepted the delete request for the authentication token of the Whiteflag originator",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "$ref": "protocol/state.schema.json#/definitions/originatorObject"
                                }
                            }
                        }
                    }
                }
            },
            "queueState": {
                "description": "Successfully retrieved and returning the queue of the running API instance",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "meta": {
                                    "$ref": "#/components/schemas/responseBodyMetaObject"
                                },
                                "data": {
                                    "oneOf": [
                                        { "$ref": "protocol/state.schema.json#/properties/queue/properties/initVectors" },
                                        { "$ref": "protocol/state.schema.json#/properties/queue/properties/blockDepths" }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
